// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { StartLoadingAdminLoadStartPostData, StartLoadingAdminLoadStartPostResponses, GetAdminUserAdminUserGetData, GetAdminUserAdminUserGetResponses, GetOperationAdminOperationGetData, GetOperationAdminOperationGetResponses, GetPlayersPlayersGetData, GetPlayersPlayersGetResponses, GetPlayerPlayersIdPlayerIdGetData, GetPlayerPlayersIdPlayerIdGetResponses, GetPlayerPlayersIdPlayerIdGetErrors, GetPlayerStatsPlayersStatsIdPlayerIdGetData, GetPlayerStatsPlayersStatsIdPlayerIdGetResponses, GetPlayerStatsPlayersStatsIdPlayerIdGetErrors, PingServerPingGetData, PingServerPingGetResponses, LoginAdminLoginPostData, LoginAdminLoginPostResponses, LoginAdminLoginPostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Start Loading
 */
export const startLoadingAdminLoadStartPost = <ThrowOnError extends boolean = false>(options?: Options<StartLoadingAdminLoadStartPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartLoadingAdminLoadStartPostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin/load/start',
        ...options
    });
};

/**
 * Get Admin User
 */
export const getAdminUserAdminUserGet = <ThrowOnError extends boolean = false>(options?: Options<GetAdminUserAdminUserGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdminUserAdminUserGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin/user',
        ...options
    });
};

/**
 * Get Operation
 */
export const getOperationAdminOperationGet = <ThrowOnError extends boolean = false>(options?: Options<GetOperationAdminOperationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOperationAdminOperationGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admin/operation',
        ...options
    });
};

/**
 * Get Players
 * Get all players of the current season
 */
export const getPlayersPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<GetPlayersPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlayersPlayersGetResponses, unknown, ThrowOnError>({
        url: '/players/',
        ...options
    });
};

/**
 * Get Player
 * Get the data of one player
 */
export const getPlayerPlayersIdPlayerIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPlayerPlayersIdPlayerIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlayerPlayersIdPlayerIdGetResponses, GetPlayerPlayersIdPlayerIdGetErrors, ThrowOnError>({
        url: '/players/id/{player_id}',
        ...options
    });
};

/**
 * Get Player Stats
 */
export const getPlayerStatsPlayersStatsIdPlayerIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPlayerStatsPlayersStatsIdPlayerIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlayerStatsPlayersStatsIdPlayerIdGetResponses, GetPlayerStatsPlayersStatsIdPlayerIdGetErrors, ThrowOnError>({
        url: '/players/stats/id/{player_id}',
        ...options
    });
};

/**
 * Ping Server
 */
export const pingServerPingGet = <ThrowOnError extends boolean = false>(options?: Options<PingServerPingGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingServerPingGetResponses, unknown, ThrowOnError>({
        url: '/ping',
        ...options
    });
};

/**
 * Login
 */
export const loginAdminLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginAdminLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAdminLoginPostResponses, LoginAdminLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/admin/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};