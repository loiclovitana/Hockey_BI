// This file is auto-generated by @hey-api/openapi-ts

/**
 * AdminUser
 */
export type AdminUser = {
    /**
     * Username
     */
    username: string;
};

/**
 * AuthRequest
 */
export type AuthRequest = {
    /**
     * Hm User
     */
    hm_user: string;
    /**
     * Hm Password
     */
    hm_password: string;
};

/**
 * AuthTokenResponse
 */
export type AuthTokenResponse = {
    /**
     * Type
     */
    type?: 'bearer';
    /**
     * Access Token
     */
    access_token: string;
};

/**
 * Body_login_admin_login_post
 */
export type BodyLoginAdminLoginPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_upload_matches_csv_admin_matches_upload_post
 */
export type BodyUploadMatchesCsvAdminMatchesUploadPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * DashBoardData
 */
export type DashBoardData = {
    manager: Manager;
    /**
     * My Teams
     */
    my_teams: Array<Array<Team>>;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HockeyPlayer
 */
export type HockeyPlayer = {
    /**
     * Id
     */
    id: number;
    /**
     * Season Id
     */
    season_id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Role
     */
    role: string;
    /**
     * Foreigner
     */
    foreigner: boolean;
};

/**
 * HockeyPlayerStats
 */
export type HockeyPlayerStats = {
    /**
     * Player Id
     */
    player_id: number;
    /**
     * Season Id
     */
    season_id: number;
    /**
     * Validity Date
     */
    validity_date: string;
    /**
     * Import Id
     */
    import_id?: number | null;
    /**
     * Price
     */
    price: number;
    /**
     * Club
     */
    club: string;
    /**
     * Ownership
     */
    ownership?: number | null;
    /**
     * Hm Points
     */
    hm_points?: number | null;
    /**
     * Appearances
     */
    appearances?: number | null;
    /**
     * Goal
     */
    goal?: number | null;
    /**
     * Assists
     */
    assists?: number | null;
    /**
     * Penalties
     */
    penalties?: number | null;
    /**
     * Plus Minus
     */
    plus_minus?: number | null;
    /**
     * Estimated Value
     */
    estimated_value: number | null;
};

/**
 * LastPlayerStats
 */
export type LastPlayerStats = {
    player_info: HockeyPlayer;
    player_stats: HockeyPlayerStats | null;
};

/**
 * LoadRequest
 */
export type LoadRequest = {
    /**
     * Hm User
     */
    hm_user: string;
    /**
     * Hm Password
     */
    hm_password: string;
    /**
     * Force Team Reload
     */
    force_team_reload?: boolean;
};

/**
 * Manager
 */
export type Manager = {
    /**
     * Id
     */
    id: number;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Last Import
     */
    last_import?: string | null;
    /**
     * Autolineup
     */
    autolineup?: boolean;
};

/**
 * MatchImportResponse
 */
export type MatchImportResponse = {
    /**
     * New Matches
     */
    new_matches: number;
    /**
     * Updated Matches
     */
    updated_matches: number;
    /**
     * Message
     */
    message: string;
};

/**
 * Task
 */
export type Task = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Start At
     */
    start_at: string;
    /**
     * End At
     */
    end_at: string;
    /**
     * Error
     */
    error?: string | null;
    /**
     * Stacktrace
     */
    stacktrace?: string | null;
};

/**
 * Team
 */
export type Team = {
    /**
     * Id
     */
    id: number;
    /**
     * Team
     */
    team: string;
    /**
     * Manager Id
     */
    manager_id: number;
    /**
     * Player Id
     */
    player_id: number;
    /**
     * Season Id
     */
    season_id: number;
    /**
     * From Datetime
     */
    from_datetime?: string | null;
    /**
     * To Datetime
     */
    to_datetime?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type StartLoadingAdminLoadStartPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/load/start';
};

export type StartLoadingAdminLoadStartPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StartTeamAlignementAdminAutoteamStartPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/autoteam/start';
};

export type StartTeamAlignementAdminAutoteamStartPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAdminUserAdminUserGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/user';
};

export type GetAdminUserAdminUserGetResponses = {
    /**
     * Successful Response
     */
    200: AdminUser;
};

export type GetAdminUserAdminUserGetResponse = GetAdminUserAdminUserGetResponses[keyof GetAdminUserAdminUserGetResponses];

export type GetOperationAdminOperationGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/operation';
};

export type GetOperationAdminOperationGetResponses = {
    /**
     * Response Get Operation Admin Operation Get
     * Successful Response
     */
    200: string;
};

export type GetOperationAdminOperationGetResponse = GetOperationAdminOperationGetResponses[keyof GetOperationAdminOperationGetResponses];

export type GetTasksAdminTasksGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/admin/tasks';
};

export type GetTasksAdminTasksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTasksAdminTasksGetError = GetTasksAdminTasksGetErrors[keyof GetTasksAdminTasksGetErrors];

export type GetTasksAdminTasksGetResponses = {
    /**
     * Response Get Tasks Admin Tasks Get
     * Successful Response
     */
    200: Array<Task>;
};

export type GetTasksAdminTasksGetResponse = GetTasksAdminTasksGetResponses[keyof GetTasksAdminTasksGetResponses];

export type UploadMatchesCsvAdminMatchesUploadPostData = {
    body: BodyUploadMatchesCsvAdminMatchesUploadPost;
    path?: never;
    query?: never;
    url: '/admin/matches/upload';
};

export type UploadMatchesCsvAdminMatchesUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadMatchesCsvAdminMatchesUploadPostError = UploadMatchesCsvAdminMatchesUploadPostErrors[keyof UploadMatchesCsvAdminMatchesUploadPostErrors];

export type UploadMatchesCsvAdminMatchesUploadPostResponses = {
    /**
     * Successful Response
     */
    200: MatchImportResponse;
};

export type UploadMatchesCsvAdminMatchesUploadPostResponse = UploadMatchesCsvAdminMatchesUploadPostResponses[keyof UploadMatchesCsvAdminMatchesUploadPostResponses];

export type GetPlayersPlayersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/players/';
};

export type GetPlayersPlayersGetResponses = {
    /**
     * Response Get Players Players  Get
     * Successful Response
     */
    200: Array<HockeyPlayer>;
};

export type GetPlayersPlayersGetResponse = GetPlayersPlayersGetResponses[keyof GetPlayersPlayersGetResponses];

export type GetPlayerPlayersIdPlayerIdGetData = {
    body?: never;
    path: {
        /**
         * Player Id
         */
        player_id: number;
    };
    query?: never;
    url: '/players/id/{player_id}';
};

export type GetPlayerPlayersIdPlayerIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPlayerPlayersIdPlayerIdGetError = GetPlayerPlayersIdPlayerIdGetErrors[keyof GetPlayerPlayersIdPlayerIdGetErrors];

export type GetPlayerPlayersIdPlayerIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetPlayerStatsPlayersStatsIdPlayerIdGetData = {
    body?: never;
    path: {
        /**
         * Player Id
         */
        player_id: number;
    };
    query?: never;
    url: '/players/stats/id/{player_id}';
};

export type GetPlayerStatsPlayersStatsIdPlayerIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPlayerStatsPlayersStatsIdPlayerIdGetError = GetPlayerStatsPlayersStatsIdPlayerIdGetErrors[keyof GetPlayerStatsPlayersStatsIdPlayerIdGetErrors];

export type GetPlayerStatsPlayersStatsIdPlayerIdGetResponses = {
    /**
     * Response Get Player Stats Players Stats Id  Player Id  Get
     * Successful Response
     */
    200: Array<HockeyPlayerStats>;
};

export type GetPlayerStatsPlayersStatsIdPlayerIdGetResponse = GetPlayerStatsPlayersStatsIdPlayerIdGetResponses[keyof GetPlayerStatsPlayersStatsIdPlayerIdGetResponses];

export type GetLatestPlayerStatsPlayersLatestGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/players/latest/';
};

export type GetLatestPlayerStatsPlayersLatestGetResponses = {
    /**
     * Response Get Latest Player Stats Players Latest  Get
     * Successful Response
     */
    200: Array<LastPlayerStats>;
};

export type GetLatestPlayerStatsPlayersLatestGetResponse = GetLatestPlayerStatsPlayersLatestGetResponses[keyof GetLatestPlayerStatsPlayersLatestGetResponses];

export type LoadMyteamLoadPostData = {
    body: LoadRequest;
    path?: never;
    query?: never;
    url: '/myteam/load';
};

export type LoadMyteamLoadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoadMyteamLoadPostError = LoadMyteamLoadPostErrors[keyof LoadMyteamLoadPostErrors];

export type LoadMyteamLoadPostResponses = {
    /**
     * Successful Response
     */
    200: DashBoardData;
};

export type LoadMyteamLoadPostResponse = LoadMyteamLoadPostResponses[keyof LoadMyteamLoadPostResponses];

export type RegisterForAutolinupMyteamAutolineupRegisterPostData = {
    body: AuthRequest;
    path?: never;
    query?: never;
    url: '/myteam/autolineup/register';
};

export type RegisterForAutolinupMyteamAutolineupRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterForAutolinupMyteamAutolineupRegisterPostError = RegisterForAutolinupMyteamAutolineupRegisterPostErrors[keyof RegisterForAutolinupMyteamAutolineupRegisterPostErrors];

export type RegisterForAutolinupMyteamAutolineupRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: Manager;
};

export type RegisterForAutolinupMyteamAutolineupRegisterPostResponse = RegisterForAutolinupMyteamAutolineupRegisterPostResponses[keyof RegisterForAutolinupMyteamAutolineupRegisterPostResponses];

export type UnregisterForAutolinupMyteamAutolineupUnregisterPostData = {
    body: AuthRequest;
    path?: never;
    query?: never;
    url: '/myteam/autolineup/unregister';
};

export type UnregisterForAutolinupMyteamAutolineupUnregisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnregisterForAutolinupMyteamAutolineupUnregisterPostError = UnregisterForAutolinupMyteamAutolineupUnregisterPostErrors[keyof UnregisterForAutolinupMyteamAutolineupUnregisterPostErrors];

export type UnregisterForAutolinupMyteamAutolineupUnregisterPostResponses = {
    /**
     * Successful Response
     */
    200: Manager;
};

export type UnregisterForAutolinupMyteamAutolineupUnregisterPostResponse = UnregisterForAutolinupMyteamAutolineupUnregisterPostResponses[keyof UnregisterForAutolinupMyteamAutolineupUnregisterPostResponses];

export type PingServerPingGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ping';
};

export type PingServerPingGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LoginAdminLoginPostData = {
    body: BodyLoginAdminLoginPost;
    path?: never;
    query?: never;
    url: '/admin/login';
};

export type LoginAdminLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAdminLoginPostError = LoginAdminLoginPostErrors[keyof LoginAdminLoginPostErrors];

export type LoginAdminLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthTokenResponse;
};

export type LoginAdminLoginPostResponse = LoginAdminLoginPostResponses[keyof LoginAdminLoginPostResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};